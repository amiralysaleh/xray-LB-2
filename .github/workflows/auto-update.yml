name: Update V2Ray Configs

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  update-configs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests jdatetime
          
      - name: Create and run script
        run: |
          mkdir -p scripts
          cat > scripts/process_configs.py << 'EOL'
          import requests
          import json
          import jdatetime
          
          def get_raw_configs():
              url = "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/vmess.txt"
              try:
                  response = requests.get(url)
                  response.encoding = 'utf-8'
                  if response.status_code == 200:
                      return response.text.strip().split('\n')
                  print(f"Failed to get configs. Status code: {response.status_code}")
                  return []
              except Exception as e:
                  print(f"Error getting configs: {str(e)}")
                  return []
          
          def process_configs():
              configs = get_raw_configs()
              if not configs:
                  print("No configs found!")
                  return
              
              print(f"Found {len(configs)} configs")
              
              try:
                  url = "https://surfboardv2ray.pythonanywhere.com/convert"
                  
                  # Prepare JSON payload
                  payload = {
                      "config": "\n".join(configs)
                  }
                  
                  # Headers for JSON request
                  headers = {
                      'Content-Type': 'application/json',
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                  }
                  
                  # Send POST request with JSON data
                  response = requests.post(url, json=payload, headers=headers)
                  
                  print(f"Response status: {response.status_code}")
                  
                  if response.status_code == 200:
                      result = response.json()
                      if 'result' in result:
                          # Parse the JSON string from result
                          config_json = json.loads(result['result'])
                          
                          # Get current Persian date and time
                          now = jdatetime.datetime.now()
                          persian_datetime = now.strftime("%Y-%m-%d %H:%M")
                          
                          # Update the remarks
                          config_json['remarks'] = f"ð“…ƒ | ({persian_datetime})"
                          
                          # Convert back to formatted JSON string
                          formatted_json = json.dumps(config_json, ensure_ascii=False, indent=2)
                          
                          # Save the result
                          with open('v2ray_processed.txt', 'w', encoding='utf-8') as f:
                              f.write(formatted_json)
                          print("Successfully saved processed configs with Persian datetime")
                      else:
                          print("Error: Response does not contain 'result' field")
                          print(f"Response content: {result}")
                  else:
                      print(f"Error: Server returned status code {response.status_code}")
                      print(f"Response content: {response.text}")
                  
              except Exception as e:
                  print(f"An error occurred: {str(e)}")
                  print(f"Full error details: ", e)
          
          if __name__ == "__main__":
              process_configs()
          EOL
          
          python scripts/process_configs.py
          
      - name: Commit and push if there are changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add v2ray_processed.txt
          git add scripts/process_configs.py
          git diff --staged --quiet || git commit -m "Update V2Ray configs [skip ci]"
          git push
